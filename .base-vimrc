" load my_func.vim
let s:func_file = expand('<sfile>:p:h') . '/my_func.vim'
:execute 'source ' . s:func_file


" 脚本变量 {{{
let s:MY_RIPGREP_GLOB = '--glob !.git/ '
      \ . '--glob !node_modules/ '
      \ . '--glob !tmp/ '
      \ . '--glob !TMP/ '
      \ . '--glob !build/ '
      \ . '--glob !built/ '
      \ . '--glob !.tags '
      \ . '--glob !.tags.temp '
      \ . '--glob !*.pyc '
      \ . '--glob !*.swp'
" }}}


" vim 内置选项等 {{{
set encoding=utf-8
set nocompatible
set termguicolors
set history=10000
set exrc
set nowrapscan
" Switch syntax highlighting on, when the terminal has colors
syntax on
filetype plugin indent on

" 否则报错
if !has('nvim')
  packadd! matchit
endif

if match(&matchpairs, '<:>') == -1
  set matchpairs+=<:>
endif

let mapleader = ","

set cursorline
set nu
set ruler
set softtabstop=2
set shiftwidth=2
set linebreak
set expandtab
set foldmethod=indent
" foldlevel初始值，高于此值的fold会默认关闭
set foldlevelstart=4
" 搜索逐字符高亮
set hlsearch
set incsearch
set completeopt=menu,menuone,preview,noselect,noinsert
let &grepprg='rg --vimgrep --no-heading --no-ignore --hidden ' . s:MY_RIPGREP_GLOB

" 配置window style
set fillchars+=vert:\ 
" set statusline=%<%f%Y%=\ [%n%1*%M%R%*]\ %-19(%3l,%02c%03V%)'%02b'
" }}}


" 配置tag {{{
set tags=./.tags;
" }}}


" 配置gutentags {{{
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'
" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
let g:gutentags_ctags_exclude = ['node_modules']
" }}}


" 配置NERDTree {{{
let NERDTreeShowHidden=1
noremap <C-n> :NERDTreeToggle<CR>
noremap <leader>ee :NERDTree <bar> NERDTreeFind <C-R>%<CR>
" }}}


" 配置ycm {{{
if $VIRTUAL_ENV != ''
  let g:python3_host_prog = $VIRTUAL_ENV . '/bin/python3'
  let g:ycm_python_interpreter_path = $VIRTUAL_ENV . '/bin/python3'
endif

function! s:MyYCMTheme()
  highlight YcmErrorSection ctermbg=DarkRed
  highlight YcmErrorSign ctermbg=DarkRed
endfunction

noremap <leader>ja :YcmCompleter GoTo<CR>
noremap <leader>jr :YcmCompleter GoToReferences<CR>
noremap <leader>ycmdbg :YcmDebugInfo<CR>
let s:ncpucores = str2nr(system('getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu | sed "s/[^0-9]//g"'))
let g:ycm_clangd_args = ['-log=error', '-pretty', '-limit-results=100', '-j=' . s:ncpucores, '-pch-storage=disk']
" Let clangd fully control code completion
let g:ycm_clangd_uses_ycmd_caching = 0
" Use installed clangd, not YCM-bundled clangd which doesn't get updates.
let g:ycm_clangd_binary_path = exepath('clangd')
let g:ycm_autoclose_preview_window_after_insertion = 1
" }}}


" 配置ale {{{
nnoremap <leader>] :ALEGoToDefinition<CR>
nnoremap <leader>\ :ALEGoToDefinitionInVSplit<CR>
nnoremap <leader>^ :ALEFindReferences<CR>
" ycm semantic completion does not quite work, so i'm gonna: use ale to do lint and
" semantic completion, use ycm to do tag based completion
let g:ale_completion_enabled = 1
let g:ale_set_highlights = 0 " Disable highligting
" let g:ale_set_signs = 0
let g:ale_linters = {
      \ 'javascript': ['eslint', 'tsserver'],
      \ 'cpp': ['clangd'],
      \ }
let g:ale_cpp_clangd_executable = '/usr/local/opt/llvm/bin/clangd'
" }}}


" 配置SirVer/ultisnips {{{
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<C-l>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
" }}}


" Config indentLine {{{
let g:indentLine_char_list = ['|', '¦', '┆',  '↓', '↑', '†', '·', '‖', 'ˇ', '┊']
nnoremap <leader>ig :IndentLinesToggle<CR>
let g:indentLine_enabled = 0
let g:indentLine_concealcursor = 'c'
" }}}


" 自动命令 ---------------------- {{{
augroup mygroup
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  " 打开文件时光标自动定位到上次退出时的位置
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ |   exe "normal! g`\""
        \ | endif
  if exists(':YcmRestartServer')
    autocmd BufEnter COMMIT_EDITMSG let g:ycm_collect_identifiers_from_comments_and_strings = 1 | :silent YcmRestartServer
    autocmd BufLeave COMMIT_EDITMSG let g:ycm_collect_identifiers_from_comments_and_strings = 0 | :silent YcmRestartServer
  endif
augroup END
" }}}


" emmet-vim {{{
let g:user_emmet_install_global = 0
let g:user_emmet_settings = {
      \  'javascript.jsx' : {
      \      'extends' : 'jsx',
      \  },
      \}
autocmd mygroup FileType html,css,javascript,typescript,jsx EmmetInstall
" }}}


" 配置fugitive-gitlab {{{
let g:fugitive_gitlab_domains = ['https://code.smartstudy.com/']
" }}}


" 配置tagbar {{{
let g:tagbar_autoclose = 1
noremap <silent> <F8> :TagbarToggle<CR>
" }}}


" 配置fzf {{{
" 环境变量
let $FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow ' . s:MY_RIPGREP_GLOB
let g:fzf_buffers_jump = 1
nnoremap <silent> <C-p>p :Files<CR>
nnoremap <silent> <C-p>b :Buffers<CR>
nnoremap <silent> <C-p>l :Lines<CR>
" }}}


" {{{ colorscheme
function! s:load_custom_color_scheme()
  " 依赖plugin的初始化
  set background=dark
  colorscheme gruvbox
  call s:MyYCMTheme()
endfunction
" }}}


" vim-plug插件 {{{
" plug begin with given dir; add common plugins
function! StartPlug(plugInDir)
  call plug#begin(a:plugInDir)
  Plug 'scrooloose/nerdtree'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clangd-completer --java-completer' }
  Plug 'w0rp/ale'
  Plug 'bestofsong/vimconfig'
  Plug 'leafgarland/typescript-vim'
  Plug 'godlygeek/tabular'
  Plug 'wellle/targets.vim'
  Plug 'easymotion/vim-easymotion'
  Plug 'tpope/vim-fugitive'
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'Yggdroot/indentLine'
  Plug 'tpope/vim-dispatch'
  Plug 'morhetz/gruvbox'
  Plug 'pangloss/vim-javascript'
  Plug 'mxw/vim-jsx'
  Plug 'mattn/emmet-vim', { 'commit': 'd698f1658770ca5fa58c87e80421c8d65bbe9065' }
  Plug 'ap/vim-css-color'
  Plug 'ekalinin/Dockerfile.vim'
  Plug 'shumphrey/fugitive-gitlab.vim'
  Plug 'majutsushi/tagbar'
  Plug 'jiangmiao/auto-pairs'
  Plug 'vim-ruby/vim-ruby'
  Plug '/usr/local/opt/fzf'
  Plug 'junegunn/fzf.vim'
  Plug 'vim-airline/vim-airline'
endfunction

function! EndPlug()
  call plug#end()
  call s:load_custom_color_scheme()
endfunction
" }}}


" load my_key_binding.vim
let s:my_key_binding_file = expand('<sfile>:p:h') . '/my_key_binding.vim'
:execute 'source ' . s:my_key_binding_file
