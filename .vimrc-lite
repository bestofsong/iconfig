set encoding=utf-8
set nocompatible
set termguicolors


let mapleader = ","

" Switch syntax highlighting on, when the terminal has colors
syntax on
filetype plugin indent on

set cursorline
set nu
set ruler
set tabstop=2
set expandtab
set foldmethod=indent
set shiftwidth=2
" foldlevel初始值，高于此值的fold会默认关闭
set foldlevelstart=4
" 搜索逐字符高亮
set hlsearch
set incsearch
set completeopt=menu,menuone,preview,noselect,noinsert

" 配置window style {{{
set fillchars+=vert:\ 
highlight VertSplit ctermfg=LightGreen
highlight StatusLine ctermfg=Green
highlight StatusLineNC ctermfg=LightGreen
" }}}

" Color theme {{{
set background=dark
" }}}

" 配置tag {{{
set tags=./.tags;
" }}}


" key bindings {{{
nnoremap <leader>msg :messages<CR>
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
" 编辑快捷键
" 快速保存
inoremap <Esc><Esc> <Esc>:w<CR>
" 关闭高亮
nnoremap <leader>nh :noh<CR>
" 向前/后跳转至{/}符号
map [[ ?{<CR>w99[{
map ][ /}<CR>b99]}
map ]] j0[[%/{<CR>
map [] k$][%?}<CR>

command! -nargs=1 CMDGoNextFold call GoNextFold(<args>)
command! -nargs=1 CMDGoPrevFold call GoPrevFold(<args>)
" 此处的c-u说是要清楚什么范围，没看懂文档;[
nnoremap <leader>zj :call :<C-U>CMDGoNextFold(v:count1)<CR>
nnoremap <leader>zk :call :<C-U>CMDGoPrevFold(v:count1)<CR>

xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

function! GoNextFold(cnt)
  if a:cnt ==# 0
    return
  endif
  let l:initial_line = line('.')
  let l:lnum = foldclosedend(l:initial_line) + 1
  if l:lnum ==# 0
    let l:lnum = l:initial_line
  endif 
  let l:end_line = line('$')
  while foldclosed(l:lnum) ==# -1 && l:lnum <=# l:end_line
    let l:lnum += 1
  endwhile
  if l:lnum ># l:end_line
    return
  endif
  execute 'normal! ' . l:lnum . 'G'
  call GoNextFold(a:cnt - 1)
endfunction

function! GoPrevFold(cnt)
  if a:cnt ==# 0
    return
  endif
  let l:initial_line = line('.')
  let l:lnum = foldclosed(l:initial_line) - 1
  if l:lnum ==# -2
    let l:lnum = l:initial_line
  endif 
  let l:end_line = 1
  while foldclosed(l:lnum) ==# -1 && l:lnum >=# l:end_line
    let l:lnum -= 1
  endwhile
  if l:lnum <# l:end_line
    return
  endif
  execute 'normal! ' . l:lnum . 'G'
  call GoPrevFold(a:cnt - 1)
endfunction

noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
" }}}


" 自定义命令 {{{
command! -nargs=+ -complete=file GR call CGrepSourceCode(<f-args>)
command! -nargs=+ -complete=file GR2 call GrepSourceCode(<f-args>)

function! CGrepSourceCode(...)
  let l:word = expand('<cword>')
  let l:args = a:000[0:]
  let l:prepended = reverse(add(reverse(l:args), l:word))
  call call(function('GrepSourceCode'), l:prepended)
endfunction

function! GrepSourceCode(...)
  execute 'grep -RE '
        \ . '--exclude-dir .git '
        \ . '--exclude-dir node_modules '
        \ . '--exclude-dir tmp '
        \ . '--exclude-dir build '
        \ . '--exclude-dir built '
        \ . '--exclude .tags '
        \ . '--exclude *.swp '
        \ . join(a:000)
endfunction
" }}}


" 自动命令 ---------------------- {{{
augroup mygroup
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  " 打开文件时光标自动定位到上次退出时的位置
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ |   exe "normal! g`\""
        \ | endif
augroup END
" }}}
